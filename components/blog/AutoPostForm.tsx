'use client'

import { useState } from 'react'
import { generatePostByKeyword } from '@/lib/openai/generatePostByKeyword'
import { fetchImageByKeyword } from '@/lib/unsplash/fetchImageByKeyword'
import { useAddPost } from '@/lib/hooks/useAddPost'
import { generateSlug } from '@/lib/utils/slug'

export const AutoPostForm = () => {
  const [keyword, setKeyword] = useState('')
  const [loading, setLoading] = useState(false)
  const [generated, setGenerated] = useState<Awaited<
    ReturnType<typeof generatePostByKeyword>
  > | null>(null)

  const { addAutoPost } = useAddPost()

  const handleGenerate = async () => {
    setLoading(true)
    try {
      const res = await fetch('/api/generate-post', {
        method: 'POST',
        body: JSON.stringify({ keyword }),
        headers: { 'Content-Type': 'application/json' },
      })
      const data = await res.json()
      console.log('🟢 受け取った生成記事:', data)

      setGenerated(data) // ← 🔥 これがないと `handlePost()` が空のまま
    } catch (e) {
      alert('記事の生成に失敗しました')
      console.error(e)
    } finally {
      setLoading(false)
    }
  }

  const handlePost = async () => {
    if (!generated) return

    const slug = generateSlug(generated.title)
    const now = new Date()

    const image = await fetchImageByKeyword(generated.thumbnailKeywords)
    if (!image) {
      alert('画像の取得に失敗しました')
      return
    }

    await addAutoPost({
      title: generated.title,
      body: generated.body,
      slug,
      category: generated.category,
      tags: generated.tags,
      thumbnailUrl: image.url,
      thumbnailAttribution: {
        photographer: image.photographer,
        photographer_url: image.photographer_url,
      },
      autoGenerated: true,
      createdAt: { seconds: Math.floor(now.getTime() / 1000) },
      publishedAt: { seconds: Math.floor(now.getTime() / 1000) },
      clickCount: 0,
      readCount: 0,
      variantId: 'A',
      testTarget: ['title'],
    })

    alert('投稿が完了しました')
    setGenerated(null)
    setKeyword('')
  }

  return (
    <div className="p-4 border rounded-xl bg-white shadow-md space-y-4 max-w-2xl mx-auto">
      <h2 className="text-xl font-bold">AI記事自動生成フォーム</h2>

      <input
        className="w-full border px-3 py-2 rounded"
        type="text"
        placeholder="キーワードを入力（例: プログラミングスクール）"
        value={keyword}
        onChange={(e) => setKeyword(e.target.value)}
      />

      <button
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        onClick={handleGenerate}
        disabled={loading || !keyword}
      >
        {loading ? '生成中…' : '記事を生成'}
      </button>

      {generated && (
        <div className="border-t pt-4 space-y-2">
          <h3 className="text-lg font-semibold">{generated.title}</h3>
          <p className="text-sm text-gray-500">
            カテゴリ: {generated.category}
          </p>
          <p className="text-sm text-gray-500">
            タグ: {generated.tags.join(', ')}
          </p>
          <p className="text-sm text-gray-500">
            画像キーワード: {generated.thumbnailKeywords}
          </p>
          <div className="prose prose-sm max-w-none border rounded p-3 bg-gray-50 whitespace-pre-wrap">
            {generated.body}
          </div>

          <button
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            onClick={handlePost}
          >
            Firestoreに投稿する
          </button>
        </div>
      )}
    </div>
  )
}
