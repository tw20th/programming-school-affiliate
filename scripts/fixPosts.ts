// scripts/fixPosts.ts

import { initializeApp, cert } from 'firebase-admin/app'
import { getFirestore, Timestamp } from 'firebase-admin/firestore'
import slugify from 'slugify'
import 'dotenv/config'

// 🔐 Base64文字列をデコード → JSONパース
const base64 = process.env.FIREBASE_ADMIN_KEY_BASE64
if (!base64) throw new Error('FIREBASE_ADMIN_KEY_BASE64 が未定義です')

const serviceAccount = JSON.parse(
  Buffer.from(base64, 'base64').toString('utf-8')
)

initializeApp({
  credential: cert(serviceAccount),
})

const db = getFirestore()

function generateSlug(title: string): string {
  const base = slugify(title, { lower: true, strict: true })
  const randomSuffix = Math.random().toString(36).substring(2, 6)
  return `${base}-${randomSuffix}`
}

async function fixPosts() {
  const snapshot = await db.collection('posts').get()

  const updates = snapshot.docs.map(async (doc) => {
    const data = doc.data()
    const updated: Record<string, any> = {}

    // 1. slug 補完
    if (!data.slug || data.slug === '---') {
      updated.slug = generateSlug(data.title || 'no-title')
    }

    // 2. publishedAtTimestamp 補完（必ず追加）
    const publishedAt =
      data.publishedAt instanceof Timestamp ? data.publishedAt : Timestamp.now()
    updated.publishedAt = publishedAt
    updated.publishedAtTimestamp = publishedAt.toDate().getTime()

    // 3. keyword 補完
    if (!data.keyword) {
      updated.keyword = 'unknown'
    }

    // 4. 各種初期値補完
    updated.autoGenerated = data.autoGenerated ?? false
    updated.clickCount = data.clickCount ?? 0
    updated.readCount = data.readCount ?? 0
    updated.variantId = data.variantId ?? 'A'
    updated.testTarget = data.testTarget ?? ['title']

    // 5. 拡張分析項目の追加
    updated.source = updated.autoGenerated ? 'auto' : 'manual'
    updated.score = data.score ?? 0
    updated.wordCount = data.body ? data.body.length : 0
    updated.internalLinks = Array.isArray(data.internalLinks)
      ? data.internalLinks
      : []
    updated.updatedAt = Timestamp.now()

    await doc.ref.update(updated)
    console.log(`✅ Updated: ${doc.id}`)
  })

  await Promise.all(updates)
  console.log('🎉 全記事の更新が完了しました！')
}

fixPosts().catch((err) => console.error('❌ エラー:', err))
