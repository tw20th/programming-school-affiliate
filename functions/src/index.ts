import {onSchedule} from "firebase-functions/v2/scheduler";
import * as logger from "firebase-functions/logger";
import {initializeApp} from "firebase-admin/app";
import {getFirestore, Timestamp} from "firebase-admin/firestore";
import OpenAI from "openai";
import {defineSecret} from "firebase-functions/params";

export const OPENAI_API_KEY = defineSecret("OPENAI_API_KEY");

// Firebase & Firestore 初期化
initializeApp();
const db = getFirestore();

// 🔁 毎朝9時に記事を生成して投稿
export const scheduledAutoPost = onSchedule(
  {schedule: "every day 09:00", secrets: [OPENAI_API_KEY]},
  async () => {
    logger.info("📅 自動投稿スケジュール実行開始");

    // ✅ Secret から APIキーを取得
    const openai = new OpenAI({
      apiKey: OPENAI_API_KEY.value(),
    });

    const keyword = "副業 パパ 学習";

    // 🔹 プロンプト（Next.jsで使っていたものと完全一致）
    const prompt = `
【キャラクター設定】
あなたは38歳の営業職、共働きで子どもが2人いるという設定の「共感キャラクター」です。
読者と同じ目線・等身大の語り口で、自分の体験を語りながら文章を綴ってください。

【ブログ記事の出力構造】
以下の形式で出力してください（順番厳守・ラベル厳守）：

■ タイトル  
読者の心に引っかかる自然なタイトルをつけてください

■ カテゴリ  
副業／プログラミング学習／体験談／スクール選び など適切なカテゴリを1つ

■ 本文（Markdown）  
見出し（##）、リスト、改行を使って読みやすく書いてください。  
導入は感情・共感から入り、不安や悩み → 試行錯誤 → 気づき → 軽いリンク誘導 の流れで構成してください。

■ サムネ画像キーワード  
英単語3つをカンマ区切りで。記事の雰囲気・感情を反映（例: night, home, quiet）

■ タグ  
副業, プログラミング, 子育て, 体験談, 未経験 など3〜5個（カンマ区切り）

■ 推奨内部リンク  
下記から最大3つ選び、スラッグ形式で出力してください：
/comparison  
/blog/choose-programming-school-5-tips  
/blog/sidejob-success-programming-school  
/blog/check-before-apply-programming-school  
/blog/school-failures-and-how-to-avoid  
/blog/programming-beginner-complete-guide

【キーワード】
${keyword}

この形式に**必ず**従ってください。
  `;

    // 🔹 OpenAI API呼び出し
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      temperature: 0.7,
      messages: [
        {
          role: "system",
          content:
            "あなたは共感を大切にする日本語のブログライターです。SEOにも強く、Markdown形式で記事を書きます。",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
    });

    const raw = response.choices[0]?.message.content ?? "";
    logger.info("🧾 OpenAI生成結果:", raw);

    // 🔹 正規表現で各パートを抽出
    const pattern =
      "■ タイトル\\s*(.+?)\\n+" +
      "■ カテゴリ\\s*(.+?)\\n+" +
      "■ 本文（Markdown）\\s*([\\s\\S]+?)\\n+" +
      "■ サムネ画像キーワード\\s*(.+?)\\n+" +
      "■ タグ\\s*([\\s\\S]+?)\\n+" +
      "■ 推奨内部リンク\\s*([\\s\\S]+)$";

    const match = raw.match(new RegExp(pattern, "i"));

    if (!match) {
      logger.error("⚠️ OpenAI出力の形式に誤りがあります");
      return;
    }

    const [, title, category, body, , tagsRaw, linksRaw] = match;

    const tags = tagsRaw
      .split(/,|\n|・|・/)
      .map((t) => t.trim())
      .filter(Boolean);

    const internalLinks = linksRaw
      .split(/\s|\n/)
      .map((l) => l.trim())
      .filter((l) => l.startsWith("/"));

    const now = new Date();
    const scheduled = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24時間後

    // 🔹 Firestore に投稿するデータ
    const post = {
      title: title.trim(),
      body: body.trim(),
      category: category.trim(),
      slug: generateSlug(title),
      tags,
      internalLinks,
      thumbnailUrl: "", // サムネは別関数で後ほど対応OK
      thumbnailAttribution: {
        photographer: "",
        photographer_url: "",
      },
      autoGenerated: true,
      variantId: "A",
      testTarget: ["title"],
      clickCount: 0,
      readCount: 0,
      createdAt: Timestamp.fromDate(now),
      publishedAt: Timestamp.fromDate(scheduled),
    };

    // 🔹 Firestore に追加
    await db.collection("posts").add(post);
    logger.info(`✅ 自動投稿成功: ${post.title}`);
  }
);

/**
 * タイトルから URL 用の slug を生成する
 * @param {string} title ブログ記事のタイトル
 * @return {string} slug化された文字列（英数字・ハイフン）
 */
function generateSlug(title: string): string {
  return title
    .toLowerCase()
    .replace(/[^\w\s-]/g, "")
    .replace(/\s+/g, "-");
}
